Index: src/initialrobot/Pathfind.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package initialrobot;\n\nimport battlecode.common.*;\n\nimport java.time.Duration;\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class Pathfind {\n    static Direction direction;\n\n    public static void moveTowards(RobotController rc, MapLocation location) throws GameActionException {\n        Direction dir = rc.getLocation().directionTo(location);\n        if (rc.canMove(dir)) {\n            rc.move(dir);\n        }\n        else if (rc.canFill(rc.getLocation().add(dir))) {\n            rc.fill(rc.getLocation().add(dir));\n        }\n        else {\n            for (int i = 0; i < 8; i++) {\n                if (rc.canMove(dir)) {\n                    rc.move(dir);\n                    break;\n                }\n                else {\n                    dir = dir.rotateLeft();\n                }\n            }\n        }\n\n    }\n\n    public static void random(RobotController rc) throws GameActionException {\n        if (rc.isMovementReady()) {\n            if (direction != null && rc.canMove(direction)) {\n                rc.move(direction);\n            }\n            else {\n                direction = Direction.allDirections()[BotDuck.rng.nextInt(8)];\n            }\n        }\n    }\n\n    public static void bfs(RobotController rc, MapLocation location) {\n        Queue<MapLocation> queue = new LinkedList<>();\n\n\n    }\n}\n
===================================================================
diff --git a/src/initialrobot/Pathfind.java b/src/initialrobot/Pathfind.java
--- a/src/initialrobot/Pathfind.java	
+++ b/src/initialrobot/Pathfind.java	
@@ -2,7 +2,6 @@
 
 import battlecode.common.*;
 
-import java.time.Duration;
 import java.util.LinkedList;
 import java.util.Queue;
 
